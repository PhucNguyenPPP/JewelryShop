@page "{handler?}"
@model PRN221_JewelryShop.Pages.Staff.SaleOrderScreen.SaleOrderDetailModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery a
@{
    Layout = "_LayoutStaff";
    var priceFormat = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    priceFormat.NumberGroupSeparator = ".";
    var token = a.GetAndStoreTokens(HttpContext).RequestToken;
    var currentDate = DateTime.Now;
    var createdDate = Model.SaleOrder?.CreatedDate ?? DateTime.Now;
    var returnPolicyDays = Model.ReturnPolicyDateAllowReturn?.PolicyValue ?? 0;
    var isReturnAllowed = (currentDate - createdDate).TotalDays <= returnPolicyDays;
    bool canBuyBack = false;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/ProuductDetail.css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" />
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="header">
        <h1>Sale Order Details</h1>
    </div>
    <div class="content" style="margin: auto;">
        <div class="row">
            <h5 class="text-danger">@TempData["BuyBackAmountError"]</h5>
            <h5 class="text-danger">@TempData["BuyBackReasonError"]</h5>
            <div class="col-md-6">
                <div class="field">
                    <label>Customer Name</label>
                    <span>@Model.SaleOrder?.Customer?.CustomerName</span>
                </div>
                <div class="field">
                    <label>Phone</label>
                    <span>@Model.SaleOrder?.Customer?.PhoneNumber</span>
                </div>
                <div class="field">
                    <label>Email</label>
                    <span>@Model.SaleOrder?.Customer?.Email</span>
                </div>
                <div class="field">
                    <label>Created By</label>
                    <span>@Model.SaleOrder?.Employee?.EmployeeName</span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="field">
                    <label>Created Date</label>
                    <span>@Model.SaleOrder?.CreatedDate</span>
                </div>
                @if (@Model.SaleOrder?.PromotionCode != null)
                {
                    <div class="field">
                        <label>Promotion Code</label>
                        <span>@Model.SaleOrder?.PromotionCode?.PromotionCodeName</span>
                    </div>
                }
                else
                {
                    <div class="field">
                        <label>Promotion Code</label>
                        <span>N/A</span>
                    </div>
                }
                <div class="field">
                    <label>Total Price</label>
                    <span>@Model.SaleOrder?.FinalPrice?.ToString("#,0", priceFormat) VND</span>
                </div>
                <div class="field">
                    <label>Payment method</label>
                    <span>@Model.SaleOrder?.PaymentMethod</span>
                </div>
                @if (@Model.SaleOrder?.PaymentMethod == "Banking")
                {
                    <div class="field">
                        <label>Transaction Code</label>
                        <span>@Model.SaleOrder?.TransactionCode</span>
                    </div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">

                <div class="field">
                    <label>Products</label>
                    @if (Model.SaleOrder?.SaleOrderDetails != null)
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Product Name</th>
                                    <th>Amount</th>
                                    <th>Price</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var s in Model.SaleOrder.SaleOrderDetails)
                                {
                                    <tr>
                                        <td>@s.Product?.ProductName</td>
                                        <td>@s.Amount</td>
                                        <td>@s.FinalPrice?.ToString("#,0", priceFormat) VND</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <button class="btn" style="background-color: orange" data-toggle="modal" data-target="#returnModal" @(isReturnAllowed ? "" : "disabled")>Return</button>
                <button class="btn" style="background-color: darkturquoise" data-toggle="modal" data-target="#buyBackModal">Buy Back</button>
                @if (!isReturnAllowed)
                {
                    <p class="text-danger">The product can only be returned within @Model.ReturnPolicyDateAllowReturn?.PolicyValue  days after the order is created.</p>
                }
                <p style="color: green">@TempData["ReturnMsg"]</p>
                <p style="color: green">@TempData["BuyBackMsg"]</p>
                <div class="field">
                    <label>Buy Back Product</label>
                    @if (Model.SaleOrder?.BuyBackOrders != null)
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Product Name</th>
                                    <th>Amount</th>
                                    <th>Price</th>
                                    <th>Created Date</th>
                                    <th>Created By</th>
                                    <th>Buy Back Policy</th>
                                    <th>Reason</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var s in Model.SaleOrder?.BuyBackOrders.ToList())
                                {
                                    @foreach (var i in s.BuyBackOrderDetails)
                                    {
                                        <tr>
                                            <td>@i.Product.ProductName</td>
                                            <td>@i.Amount</td>
                                            <td>@i.Bbprice?.ToString("#,0", priceFormat) VND</td>
                                            <td>@s.CreatedDate</td>
                                            <td>@s.Employee?.EmployeeName</td>
                                            <td>@i.Policy?.PolicyName</td>
                                            <td>@i.Reason</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                </div>

                <div class="field">
                    <label>Return Product</label>
                    @if (Model.SaleOrder?.BuyBackOrders != null)
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Product Name</th>
                                    <th>Amount</th>
                                    <th>Price</th>
                                    <th>Created Date</th>
                                    <th>Created By</th>
                                    <th>Reason</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var s in Model.SaleOrder?.ReturnOrders.ToList())
                                {
                                    @foreach (var i in s.ReturnOrderDetails)
                                    {
                                        <tr>
                                            <td>@i.Product.ProductName</td>
                                            <td>@i.Amount</td>
                                            <td>@i.ReturnPrice?.ToString("#,0", priceFormat) VND</td>
                                            <td>@s.CreatedDate</td>
                                            <td>@s.Employee?.EmployeeName</td>
                                            <td>@i.Reason</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="returnModal" tabindex="-1" role="dialog" aria-labelledby="returnModalLabel" aria-hidden="true">
        <div class="modal-dialog" style="max-width: 80%" role="document">
            <div class="modal-content">
                <form method="post" id="returnForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="returnModalLabel">Return Confirmation</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (Model.SaleOrder?.SaleOrderDetails != null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Product Name</th>
                                        <th>Amount</th>
                                        <th>Reason</th>
                                        <th>Price</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        foreach (var s in Model.SaleOrder.SaleOrderDetails)
                                        {
                                            var bbOrderList = Model.SaleOrder.BuyBackOrders.Where(c => c.SaleOrderId == s.SaleOrderId).ToList();
                                            var returnOrderList = Model.SaleOrder.ReturnOrders.Where(c => c.SaleOrderId == s.SaleOrderId).ToList();
                                            if (bbOrderList.Count == 0 && returnOrderList.Count == 0)
                                            {
                                                canBuyBack = true;
                                                <tr>
                                                    <td><input type="checkbox" class="refund-checkbox" data-product-id="@s.ProductId" data-final-price="@(s.FinalPrice / @s.Amount)" data-refund-percentage="@Model.ReturnPolicyRefundPercentage?.PolicyValue" disabled /></td>
                                                    <td>@s.Product?.ProductName</td>
                                                    <td><input type="number" class="refund-amount" min="1" max="@s.Amount" data-checkbox-id="@s.ProductId" /></td>
                                                    <td><input type="text" class="refund-reason" min="1" data-checkbox-id="@s.ProductId" required /></td>
                                                    <td><span class="refund-price-text" data-checkbox-id="@s.ProductId">0 VND</span></td>
                                                </tr>
                                            }
                                            else
                                            {
                                                int? returnAmount = 0;
                                                foreach (var i in bbOrderList)
                                                {
                                                    var bbOrderDetail = i.BuyBackOrderDetails.FirstOrDefault(c => c.Bboid == i.Bboid && c.ProductId == s.ProductId);
                                                    if (bbOrderDetail != null && bbOrderDetail.Amount != null)
                                                    {
                                                        returnAmount += bbOrderDetail.Amount;
                                                    }
                                                    else
                                                    {
                                                        returnAmount += 0;
                                                    }
                                                }

                                                foreach (var i in returnOrderList)
                                                {
                                                    var returnOrderDetail = i.ReturnOrderDetails.FirstOrDefault(c => c.ReturnOrderId == i.ReturnOrderId && c.ProductId == s.ProductId);
                                                    if (returnOrderDetail != null && returnOrderDetail.Amount != null)
                                                    {
                                                        returnAmount += returnOrderDetail.Amount;
                                                    }
                                                    else
                                                    {
                                                        returnAmount += 0;
                                                    }
                                                }

                                                if (returnAmount < s.Amount)
                                                {
                                                    canBuyBack = true;
                                                    <tr>
                                                        <td><input type="checkbox" class="refund-checkbox" data-product-id="@s.ProductId" data-final-price="@(s.FinalPrice / @s.Amount)" data-refund-percentage="@Model.ReturnPolicyRefundPercentage?.PolicyValue" disabled /></td>
                                                        <td>@s.Product?.ProductName</td>
                                                        <td><input type="number" class="refund-amount" min="1" max="@(s.Amount - returnAmount)" data-checkbox-id="@s.ProductId" /></td>
                                                        <td><input type="text" class="refund-reason" min="1" data-checkbox-id="@s.ProductId" required /></td>
                                                        <td><span class="refund-price-text" data-checkbox-id="@s.ProductId">0 VND</span></td>
                                                    </tr>
                                                }
                                            }
                                        }

                                        if (!canBuyBack)
                                        {
                                            <tr class="text-danger">
                                                <p class="text-danger"> There are no product for refunding</p>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                            <div class="total-price fw-bold">
                                <label>Total Refund: </label>
                                <span id="total-refund">0</span>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" id="btn-confirm-return" class="btn" style="background-color: orange" @(canBuyBack ? "" : "disabled")>Confirm Return</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Buy Back Modal -->
    <div class="modal fade" id="buyBackModal" tabindex="-1" role="dialog" aria-labelledby="buyBackModalLabel" aria-hidden="true">
        <div class="modal-dialog" style="max-width: 80%" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="buyBackModalLabel">Buy Back Confirmation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (Model.SaleOrder?.SaleOrderDetails != null)
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Product Name</th>
                                    <th>Amount</th>
                                    <th>Reason</th>
                                    <th>Price</th>
                                    <th>Buy Back Policy</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (var s in Model.SaleOrder.SaleOrderDetails)
                                    {
                                        var bbOrderList = Model.SaleOrder.BuyBackOrders.Where(c => c.SaleOrderId == s.SaleOrderId).ToList();
                                        var returnOrderList = Model.SaleOrder.ReturnOrders.Where(c => c.SaleOrderId == s.SaleOrderId).ToList();
                                        if (bbOrderList.Count == 0 && returnOrderList.Count == 0)
                                        {
                                            canBuyBack = true;
                                            <tr>
                                                <td><input type="checkbox" class="buyback-checkbox" data-product-id="@s.ProductId" data-final-price="@(s.FinalPrice / @s.Amount)" disabled /></td>
                                                <td>@s.Product?.ProductName</td>
                                                <td><input type="number" class="buyback-amount" min="1" max="@s.Amount" data-checkbox-id="@s.ProductId" data-min-amount="1" data-max-amount="@s.Amount" /></td>
                                                <td><input type="text" class="buyback-reason" min="1" data-checkbox-id="@s.ProductId" required /></td>
                                                <td><span class="buyback-price-text" data-checkbox-id="@s.ProductId">0 VND</span></td>
                                                <td>
                                                    @if (Model.BuyBackPolicyList != null)
                                                    {
                                                        <select class="buyback-policy" data-checkbox-id="@s.ProductId" data-product-name="@s.Product?.ProductName">
                                                            <option></option>
                                                            @foreach (var o in Model.BuyBackPolicyList)
                                                            {
                                                                <option value="@o.PolicyId" data-buyback-policyname="@o.PolicyName" data-buyback-percentage="@o.PolicyValue">@o.PolicyName</option>
                                                            }
                                                        </select>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            int? buyBackAmount = 0;
                                            foreach (var i in bbOrderList)
                                            {
                                                var bbOrderDetail = i.BuyBackOrderDetails.FirstOrDefault(c => c.Bboid == i.Bboid && c.ProductId == s.ProductId);
                                                if (bbOrderDetail != null && bbOrderDetail.Amount != null)
                                                {
                                                    buyBackAmount += bbOrderDetail.Amount;
                                                }
                                                else
                                                {
                                                    buyBackAmount += 0;
                                                }
                                            }

                                            foreach (var i in returnOrderList)
                                            {
                                                var returnOrderDetail = i.ReturnOrderDetails.FirstOrDefault(c => c.ReturnOrderId == i.ReturnOrderId && c.ProductId == s.ProductId);
                                                if (returnOrderDetail != null && returnOrderDetail.Amount != null)
                                                {
                                                    buyBackAmount += returnOrderDetail.Amount;
                                                }
                                                else
                                                {
                                                    buyBackAmount += 0;
                                                }
                                            }

                                            if (buyBackAmount < s.Amount)
                                            {
                                                canBuyBack = true;
                                                <tr>
                                                    <td><input type="checkbox" class="buyback-checkbox" data-product-id="@s.ProductId" data-final-price="@(s.FinalPrice / @s.Amount)" disabled /></td>
                                                    <td>@s.Product?.ProductName</td>
                                                    <td><input type="number" class="buyback-amount" min="1" max="@(s.Amount - buyBackAmount)" data-checkbox-id="@s.ProductId" data-min-amount="1" data-max-amount="@s.Amount" /></td>
                                                    <td><input type="text" class="buyback-reason" min="1" data-checkbox-id="@s.ProductId" required /></td>
                                                    <td><span class="buyback-price-text" data-checkbox-id="@s.ProductId">0 VND</span></td>
                                                    <td>
                                                        @if (Model.BuyBackPolicyList != null)
                                                        {
                                                            <select class="buyback-policy" data-checkbox-id="@s.ProductId" data-product-name="@s.Product?.ProductName">
                                                                <option></option>
                                                                @foreach (var o in Model.BuyBackPolicyList)
                                                                {
                                                                    <option value="@o.PolicyId" data-buyback-policyname="@o.PolicyName" data-buyback-percentage="@o.PolicyValue">@o.PolicyName</option>
                                                                }
                                                            </select>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }

                                    if (!canBuyBack)
                                    {
                                        <tr class="text-danger">
                                            <p class="text-danger"> There are no product for buying back</p>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <div class="total-price fw-bold">
                            <label>Total Buy Back: </label>
                            <span id="total-buyback">0</span>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" id="btn-confirm-buyback" class="btn" style="background-color: darkturquoise" @(canBuyBack ? "" : "disabled")>
                        Confirm Buy Back
                    </button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const refundCheckboxes = document.querySelectorAll(".refund-checkbox");
            const totalRefundSpan = document.getElementById("total-refund");
            const refundAmountInputs = document.querySelectorAll(".refund-amount");

            function updateRefundCheckboxState() {
                refundAmountInputs.forEach(input => {
                    const productId = input.dataset.checkboxId;
                    const relatedCheckbox = document.querySelector(`.refund-checkbox[data-product-id="${productId}"]`);

                    if (input.value.trim() !== "") {
                        relatedCheckbox.disabled = false;
                    } else {
                        relatedCheckbox.disabled = true;
                        relatedCheckbox.checked = false;
                    }
                    updateTotalRefund();
                });
            }

            refundAmountInputs.forEach(input => {
                input.addEventListener("input", updateRefundCheckboxState);
            });

            refundCheckboxes.forEach(checkbox => {
                checkbox.addEventListener("change", function () {
                    const productId = checkbox.dataset.productId;
                    const relatedAmountInput = document.querySelector(`.refund-amount[data-checkbox-id="${productId}"]`);
                    if (checkbox.checked) {
                        // relatedAmountInput.disabled = true;
                    } else {
                        // relatedAmountInput.disabled = false;
                    }
                    updateTotalRefund();
                });
            });

            function updateTotalRefund() {
                let totalRefund = 0;
                refundCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        const finalPrice = parseFloat(checkbox.dataset.finalPrice) || 0;
                        const refundPercentage = parseFloat(checkbox.dataset.refundPercentage) || 0;
                        const refundPriceText = checkbox.closest('tr').querySelector('.refund-price-text');
                        const amount = parseFloat(checkbox.closest('tr').querySelector('.refund-amount').value) || 0;
                        totalRefund += finalPrice * (refundPercentage / 100) * amount;
                        refundPriceText.textContent = (finalPrice * (refundPercentage / 100)).toLocaleString("en-US") + " VND";
                    }
                });
                totalRefundSpan.textContent = totalRefund.toLocaleString("en-US") + " VND";
            }

            // Handle Confirm Return button click
            document.getElementById('returnForm').addEventListener('submit', function (event) {
                event.preventDefault();
                const selectedProductIds = [];
                const selectAmount = [];
                const reasonReturn = [];
                refundCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedProductIds.push(checkbox.dataset.productId);
                        selectAmount.push(checkbox.closest('tr').querySelector('.refund-amount').value);
                        reasonReturn.push(checkbox.closest('tr').querySelector('.refund-reason').value);
                    }
                });

                if (selectedProductIds.length === 0) {
                    alert("Please select at least one product!.");
                    return;
                }

                var token = '@token';
                const saleOrderId = '@Model.SaleOrder?.SaleOrderId';
                fetch('/Staff/SaleOrderScreen/SaleOrderDetail/ReturnProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ saleOrderId: saleOrderId, productIds: selectedProductIds, amount: selectAmount, reason: reasonReturn  }),
                    processData: false,
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        window.location.reload();// assuming server responds with JSON
                    })
                    .then(data => {
                        console.log('Returned products:', data);
                        window.location.reload(); // Reload page or update UI as needed
                    })
                    .catch(error => {
                        console.error('Error during return:', error);
                        // Handle error, show error message, etc.
                    });
            });

            // Buyback functionality
            const buybackCheckboxes = document.querySelectorAll(".buyback-checkbox");
            const totalBuybackSpan = document.getElementById("total-buyback");
            const buybackAmountInputs = document.querySelectorAll(".buyback-amount");
            const buybackPolicySelects = document.querySelectorAll(".buyback-policy");

            function updateCheckboxState() {
                buybackAmountInputs.forEach(input => {
                    const productId = input.dataset.checkboxId;
                    const relatedCheckbox = document.querySelector(`.buyback-checkbox[data-product-id="${productId}"]`);
                    const relatedPolicySelect = document.querySelector(`.buyback-policy[data-checkbox-id="${productId}"]`);

                    if (input.value.trim() !== "" && relatedPolicySelect.value.trim() !== "") {
                        relatedCheckbox.disabled = false;
                    } else {
                        relatedCheckbox.disabled = true;
                        relatedCheckbox.checked = false;
                    }
                    updateTotalBuyback();
                });
            }

            buybackAmountInputs.forEach(input => {
                input.addEventListener("input", updateCheckboxState);
            });

            buybackPolicySelects.forEach(select => {
                select.addEventListener("change", updateCheckboxState);
            });

            buybackCheckboxes.forEach(checkbox => {
                checkbox.addEventListener("change", function () {
                    const productId = checkbox.dataset.productId;
                    const relatedSelect = document.querySelector(`.buyback-policy[data-checkbox-id="${productId}"]`);
                    const relatedAmountInput = document.querySelector(`.buyback-amount[data-checkbox-id="${productId}"]`);
                    if (checkbox.checked) {
                        relatedSelect.disabled = true;
                        // relatedAmountInput.disabled = true;
                    } else {
                        relatedSelect.disabled = false;
                        // relatedAmountInput.disabled = false;
                    }
                    updateTotalBuyback();
                });
            });

            function updateTotalBuyback() {
                let totalBuyback = 0;
                buybackCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        const finalPrice = parseFloat(checkbox.dataset.finalPrice) || 0;
                        const amount = parseFloat(checkbox.closest('tr').querySelector('.buyback-amount').value) || 0;
                        const policySelect = document.querySelector(`.buyback-policy[data-checkbox-id="${checkbox.dataset.productId}"]`);
                        const productName = policySelect.dataset.productName;
                        const priceText = checkbox.closest('tr').querySelector('.buyback-price-text');

                        if (policySelect.selectedOptions[0].dataset.buybackPolicyname == "Only Gold") {
                            let goldPrice = 0;
                            switch (productName) {
                                case 'SJC Gold Bar 100 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "SJC Gold Bar")?.BuyPrice);
                                    break;
                                case 'SJC Gold Bar 50 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "SJC Gold Bar")?.BuyPrice * 0.5);
                                    break;
                                case 'SJC Gold Bar 10 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "SJC Gold Bar")?.BuyPrice * 0.1);
                                    break;
                                case '24K Gold 50 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "24K Gold")?.BuyPrice * 0.5);
                                    break;
                                case '18K Gold 50 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "18K Gold")?.BuyPrice * 0.5);
                                    break;
                                case '14K Gold 50 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "14K Gold")?.BuyPrice * 0.5);
                                    break;
                                case '10K Gold 50 fences':
                                    goldPrice = @(Model.GoldPriceDTOList?.FirstOrDefault(c => c.Type == "10K Gold")?.BuyPrice * 0.5);
                                    break;
                                default:
                                    break;
                            }
                            totalBuyback += goldPrice * amount;
                            priceText.textContent = goldPrice.toLocaleString("en-US") + " VND";
                        } else {
                            const buybackPercentage = parseFloat(policySelect.selectedOptions[0].dataset.buybackPercentage) || 0;
                            totalBuyback += finalPrice * (buybackPercentage / 100) * amount;
                            priceText.textContent = (finalPrice * (buybackPercentage / 100)).toLocaleString("en-US") + " VND";
                        }
                    }
                });
                totalBuybackSpan.textContent = totalBuyback.toLocaleString("en-US") + " VND";
            }


            const btnConfirmBuyBack = document.getElementById("btn-confirm-buyback");
            if (btnConfirmBuyBack) {
                btnConfirmBuyBack.addEventListener("click", function () {

                    const selectedProductIds = [];
                    const selectedPolicies = [];
                    const selectAmount = [];
                    const buybackReason = [];
                    // var checkAmount = true;
                    // buybackCheckboxes.forEach(checkbox => {
                    //     if (checkbox.checked) {
                    //         const amountElement = document.querySelector(`.buyback-amount[data-checkbox-id="${checkbox.dataset.productId}"]`);
                    //         const maxAmount = amountElement.getAttribute('data-max-amount');
                    //         const minAmount = amountElement.getAttribute('data-min-amount');
                    //         console.log(minAmount, maxAmount)
                    //         console.log(checkbox.closest('tr').querySelector('.buyback-amount').value)
                    //         if (maxAmount < checkbox.closest('tr').querySelector('.buyback-amount').value) {
                    //             checkAmount = false;
                    //             return;
                    //         }
                    //         if (minAmount > checkbox.closest('tr').querySelector('.buyback-amount').value) {
                    //             checkAmount = false;
                    //             return;
                    //         }
                    //         console.log(checkAmount)
                    //     }
                    // });

                    buybackCheckboxes.forEach(checkbox => {
                        if (checkbox.checked) {
                            selectedProductIds.push(checkbox.dataset.productId);
                            selectAmount.push(checkbox.closest('tr').querySelector('.buyback-amount').value);
                            const relatedSelect = document.querySelector(`.buyback-policy[data-checkbox-id="${checkbox.dataset.productId}"]`);
                            selectedPolicies.push(relatedSelect.value);
                            buybackReason.push(checkbox.closest('tr').querySelector('.buyback-reason').value);
                        }
                    });

                    if (selectedProductIds.length === 0) {
                        alert("Please select at least one product!.");
                        return;
                    }
                    // if (!checkAmount) {
                    //     alert("Amount is invalid!.");
                    //     return;
                    // } else {
                        var token = '@token';
                        const saleOrderId = '@Model.SaleOrder?.SaleOrderId';
                        fetch('/Staff/SaleOrderScreen/SaleOrderDetail/BuyBackProduct', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({
                                saleOrderId: saleOrderId,
                                productIds: selectedProductIds,
                                amount: selectAmount,
                                policyIds: selectedPolicies,
                                reason: buybackReason,
                            }),
                            processData: false,
                        })
                            .then(response => {
                                if (!response.ok) {
                                window.location.reload();
                                }
                            })
                            .then(data => {
                                console.log('Confirmed buyback:', data);
                                window.location.reload();
                            })
                            .catch(error => {
                                console.error('Error during buyback:', error);
                            });
                    // }

                });
            }
        });
    </script>
</body>
</html>
