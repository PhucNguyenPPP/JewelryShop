@page "{handler?}"
@model PRN221_JewelryShop.Pages.Staff.SaleOrderScreen.AddSaleOrderModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery a
@{
    var priceFormat = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    priceFormat.NumberGroupSeparator = ".";
    var temp = TempData["CreateSaleOrderMsg"];
    var token = a.GetAndStoreTokens(HttpContext).RequestToken;
    Layout = "_LayoutStaff";
    var dateNow = DateTime.Now;
}



<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/AddSaleOrder.css" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="header">
        <h1>Add Sale Order</h1>
    </div>
    <div class="content row ml-5">
        <div class="product-container col-md-8">
            <form method="post" asp-page-handler="SearchProduct" id="searchProductForm">
                <input type="hidden" asp-for="CustomerIdForm" id="customerIdForSearchProduct" value="@Model.Customer?.CustomerId" />
                <input type="text" id="txtSearchProduct" placeholder="Search by Product Name" asp-for="SearchProductValue" onchange="searchProduct()" />
                <button class="search-btn" type="submit">Search</button>
            </form>
            <div id="results-product-container">
                @if (Model.ProductResultList != null)
                {
                    if (Model.ProductResultList.Count == 0)
                    {
                        <div>
                            <p class="text-center text-danger">No result found</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var result in Model.ProductResultList)
                        {
                            <div class="product-item row"
                                 data-product-name="@result.ProductName"
                                 data-product-price="@result.Price"
                                 data-product-id="@result.ProductId"
                                 data-amount-in-stock="@result.AmountInStock">
                                <div class="col-md-3">
                                    <img class="ml-1" src="data:image/png;base64,@(result.AvatarImg)" />
                                </div>
                                <div class="col-md-9">
                                    <p class="mb-0 fw-bold">@result.ProductName</p>
                                    <p class="mb-0 .price">@result.Price?.ToString("#,0", priceFormat) VND</p>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
            <div id="productFormContainer">
                <form method="post" id="productForm">
                    <div id="selectedProductsContainer">
                        <div class="product-header">
                            <span>Product Name</span>
                            <span>Quantity</span>
                            <span class="title-price">Price</span>
                            <span class="title-total-price">Total Price</span>
                        </div>
                    </div>
                    <div class="fw-bold">Total Original Price: <span id="totalOriginal">0</span></div>
                    <div class="fw-bold text-success">Total After Discount: <span id="totalAll">0</span></div>
                    <input type="hidden" asp-for="CustomerIdForm" value="@Model.Customer?.CustomerId" />
                    <input name="__RequestVerificationToken" type="hidden" value="@token" />
                    <button type="submit">Create Sale Order</button>
                </form>
            </div>

        </div>
        <div class="customer-container col-md-4">
            <div class="sale-order-info">
                <form method="get" asp-page-handler="SearchCustomer" id="searchCustomerForm">
                    <input type="text" id="txtSearchCustomer" placeholder="Search by Name/Phone/Email" asp-for="SearchCustomer" required />
                    <button class="search-btn" type="submit">Search</button>
                </form>
                <input type="hidden" id="inputCustomerId" data-customer-id="@Model.Customer?.CustomerId" />
                <div id="results-customer-container">
                    @if (Model.CustomerResultList != null)
                    {
                        if (Model.CustomerResultList.Count == 0)
                        {
                            <div>
                                <p class="text-danger">No result found. Do you want to add new customer?</p>
                                <button class="btn btn-primary" onclick="openCreateModal()">Add</button>
                            </div>
                        }
                        else
                        {
                            @foreach (var customer in Model.CustomerResultList)
                            {
                                <form method="post" asp-page-handler="SetCustomer" id="customerItemForm-@customer.CustomerId" onclick="setCustomer('@customer.CustomerId')">
                                    <input type="hidden" value="@customer.CustomerId" asp-for="CustomerIdForm" />
                                    <div class="customer-item row"
                                         data-customer-id="@customer.CustomerId"
                                         data-customer-name="@customer.CustomerName"
                                         data-phone-number="@customer.PhoneNumber"
                                         data-email="@customer.Email">
                                        <div class="col-md-3">
                                            <img class="ml-1" src="data:image/png;base64,@(customer.AvatarImg)" />
                                        </div>
                                        <div class="col-md-9">
                                            <p class="mb-0 fw-bold">@customer.CustomerName</p>
                                            <p class="mb-0">@customer.PhoneNumber</p>
                                            <p class="mb-0">@customer.Email</p>
                                        </div>
                                    </div>
                                </form>
                            }
                        }
                    }
                </div>
            </div>
            <div class="sale-order-info">
                <span>Customer Name:</span>
                <span id="selectedCustomerName">@Model.Customer?.CustomerName</span>
            </div>
            <div class="sale-order-info">
                <span>Phone:</span>
                <span id="selectedCustomerPhone">@Model.Customer?.PhoneNumber</span>
            </div>
            <div class="sale-order-info">
                <span>Email:</span>
                <span id="selectedCustomerEmail">@Model.Customer?.Email</span>
            </div>
            <div class="sale-order-info">
                <span>Promotion Code:</span>
                <select id="promotionSelect">
                    <option></option>
                    @if (Model.PromotionCodeList != null)
                    {
                        @foreach (var i in Model.PromotionCodeList)
                        {
                            <option value="@i.PromotionCodeId"
                                    data-discount="@i.DiscountPercentage">
                                @i.PromotionCodeName
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="sale-order-info">
                <span>Payment Method:</span>
                <select id="paymentMethodSelect" onchange="toggleTransactionCodeInput()">
                    <option value="Cast">Cast</option>
                    <option value="Banking">Banking</option>
                </select>
            </div>
            <div class="sale-order-info" id="transactionCodeSection">
                <span>Transaction Code:</span>
                <input type="text" id="transactionCodeInput" />
            </div>
        </div>
    </div>

    <div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title" id="createModalLabel">Add New Customer</h2>
                    <button type="button" onclick="closeCreateModal()" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form method="post" id="createForm" asp-page-handler="CreateCustomer" enctype="multipart/form-data" class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="avatar">Avatar</label>
                                <input type="file" class="form-control" id="avatar" asp-for="@Model.CustomerAvatar" required>
                            </div>
                            <div class="form-group">
                                <label for="customerName">Customer Name</label>
                                <input type="text" class="form-control" id="customerName" asp-for="CustomerResquestDTO.CustomerName" required>
                                <p class="text-danger"><span asp-validation-for="CustomerResquestDTO.CustomerName"></span></p>
                            </div>
                            <div class="form-group">
                                <label for="phoneNumber">Phone Number</label>
                                <input type="text" class="form-control" id="phoneNumber" asp-for="CustomerResquestDTO.PhoneNumber" required>
                                <p class="text-danger"><span asp-validation-for="CustomerResquestDTO.PhoneNumber"></span></p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="email" class="form-control" id="email" asp-for="CustomerResquestDTO.Email" required>
                                <p class="text-danger"><span asp-validation-for="CustomerResquestDTO.Email"></span></p>
                            </div>
                            <div class="form-group">
                                <label for="dob">Date of Birth</label>
                                <input type="date" class="form-control" id="dob" asp-for="CustomerResquestDTO.Dob" max="@dateNow" required>
                                <p class="text-danger"><span asp-validation-for="CustomerResquestDTO.Dob"></span></p>
                            </div>
                            <div class="form-group">
                                <label for="address">Address</label>
                                <input type="text" class="form-control" id="address" asp-for="CustomerResquestDTO.Address" required>
                                <p class="text-danger"><span asp-validation-for="CustomerResquestDTO.Address"></span></p>
                            </div>
                        </div>
                    </form>
                    <h4 class="text-danger">@TempData["CreateError"]</h4>
                </div>
                <div class="modal-footer">
                    <button type="button" onclick="closeCreateModal()" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="create()">Create</button>
                </div>
            </div>
        </div>
    </div>


    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            // Function to format number with dots for thousands separator
            function formatNumber(number) {
                return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
            }

            // Function to calculate total price of all products
            function calculateTotalPrice() {
                var total = 0;
                document.querySelectorAll('.product-row').forEach(row => {
                    var totalPriceElement = row.querySelector('.total-price');
                    if (totalPriceElement) {
                        var totalPrice = parseFloat(totalPriceElement.textContent.replace(/\./g, '').replace(',', '.'));
                        total += totalPrice;
                    }
                });
                return total;
            }

            // Function to calculate the total price with promotion discount
            function calculateTotalPriceWithDiscount(totalPrice) {
                var promotionSelect = document.getElementById('promotionSelect');
                var discount = parseFloat(promotionSelect.options[promotionSelect.selectedIndex].getAttribute('data-discount')) || 0;
                var discountedTotal = totalPrice - (totalPrice * (discount / 100));
                return discountedTotal;
            }

            // Function to update the total price displayed
            function updateTotalPriceDisplay() {
                var totalPrice = calculateTotalPrice();
                var discountedTotal = calculateTotalPriceWithDiscount(totalPrice);
                var discount = parseFloat(promotionSelect.options[promotionSelect.selectedIndex].getAttribute('data-discount')) || 0;
                document.getElementById('totalOriginal').textContent = formatNumber(totalPrice) + " VND";
                document.getElementById('totalAll').textContent = formatNumber(discountedTotal) + " VND" + " -" + discount + "%" ;
            }

            // Load selected products from localStorage
            function loadSelectedProducts() {
                var selectedProducts = JSON.parse(localStorage.getItem('selectedProducts')) || [];

                // Clear existing rows before adding new ones
                var selectedProductsContainer = document.getElementById('selectedProductsContainer');
                selectedProductsContainer.innerHTML = ''; // Clear existing rows
                var productHeader = document.createElement('div');
                productHeader.classList.add('product-header');
                productHeader.innerHTML = `
                                            <span>Product Name</span>
                                            <span>Quantity</span>
                                            <span class="title-price">Price</span>
                                            <span class="title-total-price">Total Price</span>
                                        `;
                selectedProductsContainer.appendChild(productHeader);
                selectedProducts.forEach(product => {
                    // Create a new row for the selected product
                    var productRow = document.createElement('div');
                    productRow.classList.add('product-row');

                    // Create a span for the product name
                    var nameSpan = document.createElement('span');
                    nameSpan.textContent = product.name;

                    // Create an input for the quantity
                    var quantityInput = document.createElement('input');
                    quantityInput.type = 'number';
                    quantityInput.name = 'quantities';
                    quantityInput.value = product.quantity;
                    quantityInput.min = 1; // Set min based on amountInStock
                    quantityInput.max = product.amountInStock; // Set max based on data-amount-in-stock
                    quantityInput.classList.add('quantity-input');

                    // Create a span for the product price
                    var priceSpan = document.createElement('span');
                    priceSpan.textContent = formatNumber(product.price);

                    // Create a span for the total price
                    var totalSpan = document.createElement('span');
                    totalSpan.textContent = formatNumber(product.totalPrice);
                    totalSpan.classList.add('total-price');

                    // Create a remove button
                    var removeButton = document.createElement('i');
                    removeButton.classList.add('fa', 'fa-trash', 'remove-button');
                    removeButton.addEventListener('click', function () {
                        productRow.remove();
                        var totalPrice = calculateTotalPrice();
                        updateTotalPriceDisplay();
                        // Remove from selectedProducts array
                        selectedProducts = selectedProducts.filter(p => p.name !== product.name);
                        localStorage.setItem('selectedProducts', JSON.stringify(selectedProducts));
                    });

                    // Update the total price when quantity changes
                    quantityInput.addEventListener('input', function () {
                        var quantity = parseInt(quantityInput.value);
                        totalSpan.textContent = formatNumber(quantity * product.price);
                        var totalPrice = calculateTotalPrice();
                        updateTotalPriceDisplay();

                        // Update selectedProducts array with new quantity
                        selectedProducts.forEach(p => {
                            if (p.name === product.name) {
                                p.quantity = quantity;
                                p.totalPrice = quantity * product.price;
                            }
                        });
                        localStorage.setItem('selectedProducts', JSON.stringify(selectedProducts));
                    });

                    // Append elements to the product row
                    productRow.appendChild(nameSpan);
                    productRow.appendChild(quantityInput);
                    productRow.appendChild(priceSpan);
                    productRow.appendChild(totalSpan);
                    productRow.appendChild(removeButton);

                    // Append the product row to the selected products container
                    selectedProductsContainer.appendChild(productRow);
                });

                // Update total price initially
                updateTotalPriceDisplay();
            }

            // Event listener for adding product to selected products container
            document.querySelectorAll('.product-item').forEach(item => {
                item.addEventListener('click', function (event) {
                    var amountInStock = parseInt(this.getAttribute('data-amount-in-stock'));

                    if (amountInStock === 0) {
                        alert('Product is out of stock.');
                        return;
                    }

                    if (document.querySelectorAll('.product-row').length >= 5) {
                        alert('Maximum of 5 products reached.');
                        return;
                    }

                    var productId = this.getAttribute('data-product-id');
                    var productName = this.getAttribute('data-product-name');
                    var productPrice = parseFloat(this.getAttribute('data-product-price'));
                    var amountInStock = parseInt(this.getAttribute('data-amount-in-stock'));

                    // Check if product is already selected
                    var selectedProducts = JSON.parse(localStorage.getItem('selectedProducts')) || [];
                    var alreadySelected = selectedProducts.some(product => product.name === productName);

                    if (!alreadySelected) {
                        selectedProducts.push({ id: productId, name: productName, price: productPrice, quantity: 1, totalPrice: productPrice, amountInStock: amountInStock });
                        localStorage.setItem('selectedProducts', JSON.stringify(selectedProducts));

                        // Reload selected products
                        loadSelectedProducts();
                    } else {
                        alert('Product already selected.');
                    }
                });
            });

            // Load selected products on page load
            loadSelectedProducts();

            // Event listener for promotion select change
            document.getElementById('promotionSelect').addEventListener('change', updateTotalPriceDisplay);

            document.getElementById('productForm').addEventListener('submit', function (event) {
                event.preventDefault();

                var selectedProducts = JSON.parse(localStorage.getItem('selectedProducts')) || [];

                // Check if there are no selected products
                if (selectedProducts.length === 0) {
                    alert('Please select at least one product.');
                    return;
                }


                var customer = @Html.Raw(Json.Serialize(Model.Customer?.CustomerId));
                if (customer === null || customer === undefined) {
                    alert('Please search and select a customer before creating sale orders.');
                    return;
                }

                var paymentMethodSelect = document.getElementById('paymentMethodSelect');
                var selectedPaymentMethod = paymentMethodSelect.value;

                if (selectedPaymentMethod === 'Banking') {
                    var transactionCodeInput = document.getElementById('transactionCodeInput').value;
                    if (transactionCodeInput.trim() === '') {
                        alert('Please enter a transaction code for banking payment.');
                        return;
                    }
                }


                var saleOrderDetails = selectedProducts.map(product => {
                    return {
                        ProductId: product.id,
                        Amount: product.quantity
                    };
                });
                var promotionValue = document.getElementById('promotionSelect').value;
                var saleOrderRequestDTO = {
                    CustomerId: '@Model.Customer?.CustomerId',
                    SaleOrderDetails: saleOrderDetails,
                    PromotionCode: promotionValue,
                    PaymentMethod: selectedPaymentMethod,
                    TransactionCode: selectedPaymentMethod === 'Banking' ? transactionCodeInput : null
                };

                var token = '@token';

                fetch('http://localhost:5281/Staff/SaleOrderScreen/AddSaleOrder/AddSaleOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(saleOrderRequestDTO),
                    processData: false,
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        localStorage.removeItem('selectedProducts');
                        document.getElementById('selectedProductsContainer').innerHTML = ''; // Clear selected products
                        document.getElementById('totalAll').textContent = '0'; // Reset total price
                        document.getElementById('productForm').reset(); // Reset form fields

                        window.location.href = 'http://localhost:5281/Staff/SaleOrderScreen/SaleOrderManagement';
                    })
            });

            document.addEventListener('click', function (event) {
                var resultsContainer = document.getElementById('results-product-container');
                var searchInput = document.getElementById('txtSearchProduct');
                var productFormContainer = document.getElementById('productFormContainer');

                if (!searchInput.contains(event.target) && !resultsContainer.contains(event.target) && !productFormContainer.contains(event.target)) {
                    resultsContainer.style.display = 'none';
                }

                var resultsContainerCustomer = document.getElementById('results-customer-container');
                var searchInputCustomer = document.getElementById('txtSearchCustomer');

                if (!searchInputCustomer.contains(event.target) && !resultsContainerCustomer.contains(event.target)) {
                    resultsContainerCustomer.style.display = 'none';
                }
            });

            document.getElementById('txtSearchProduct').addEventListener('click', function (event) {
                var resultsContainer = document.getElementById('results-product-container');
                if (this.value.trim() !== "") {
                    resultsContainer.style.display = 'block';
                }
            });

            document.getElementById('txtSearchCustomer').addEventListener('click', function (event) {
                var resultsContainer = document.getElementById('results-customer-container');
                if (this.value.trim() !== "") {
                    resultsContainer.style.display = 'block';
                }
            });
        });
        function setCustomer(customerId) {
            // Find the form corresponding to the clicked customer item
            var formId = `customerItemForm-${customerId}`;
            var form = document.getElementById(formId);

            // Submit the form using JavaScript
            if (form) {
                form.submit();
            }
        }

        function openCreateModal() {
            document.getElementById('createForm').reset();
            $('#createModal').modal('show');
        }

        function closeCreateModal() {
            document.getElementById('createForm').reset();
            $('#createModal').modal('hide');
        }
        function create() {
            var form = document.getElementById("createForm");
            if (form.checkValidity()) {
                form.submit();
                $('#createModal').modal('hide');
                resetForm();
            } else {
                form.reportValidity();
            }
        }
        $(document).ready(function () {
            $('.modal').modal({ show: false });

            $('.close').on('click', function () {
                $(this).closest('.modal').modal('hide');
            });
            $('.modal-footer button[data-dismiss="modal"]').on('click', function () {
                $(this).closest('.modal').modal('hide');
            });
        });


        const createModelError = '@(TempData["CreateModelError"] ?? "")';
        const createError = '@(TempData["CreateError"] ?? "")';

        if (createModelError !== '' || createError !== '') {
            $('#createModal').modal('show');
        }
        var transactionCodeSection = document.getElementById('transactionCodeSection');
        transactionCodeSection.style.display = 'none';

        function toggleTransactionCodeInput() {
            var paymentMethodSelect = document.getElementById('paymentMethodSelect');
            var transactionCodeSection = document.getElementById('transactionCodeSection');

            // Get the selected value
            var selectedPaymentMethod = paymentMethodSelect.value;

            // Check the selected value and show/hide the transaction code input accordingly
            if (selectedPaymentMethod === 'Banking') {
                transactionCodeSection.style.display = 'block';
            } else {
                transactionCodeSection.style.display = 'none';
            }
        }

    </script>
</body>
</html>
